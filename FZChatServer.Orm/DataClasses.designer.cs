#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace FZChatServer.Orm
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FZChatServerDatabase")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertDatabaseUser(DatabaseUser instance);
    partial void UpdateDatabaseUser(DatabaseUser instance);
    partial void DeleteDatabaseUser(DatabaseUser instance);
    partial void InsertDatabaseMessage(DatabaseMessage instance);
    partial void UpdateDatabaseMessage(DatabaseMessage instance);
    partial void DeleteDatabaseMessage(DatabaseMessage instance);
    partial void InsertUserFriend(UserFriend instance);
    partial void UpdateUserFriend(UserFriend instance);
    partial void DeleteUserFriend(UserFriend instance);
    partial void InsertDatabaseUserMessage(DatabaseUserMessage instance);
    partial void UpdateDatabaseUserMessage(DatabaseUserMessage instance);
    partial void DeleteDatabaseUserMessage(DatabaseUserMessage instance);
    partial void InsertDatabaseGroupChat(DatabaseGroupChat instance);
    partial void UpdateDatabaseGroupChat(DatabaseGroupChat instance);
    partial void DeleteDatabaseGroupChat(DatabaseGroupChat instance);
    partial void InsertDatabaseUserChat(DatabaseUserChat instance);
    partial void UpdateDatabaseUserChat(DatabaseUserChat instance);
    partial void DeleteDatabaseUserChat(DatabaseUserChat instance);
    partial void InsertDatabaseGroupChatUser(DatabaseGroupChatUser instance);
    partial void UpdateDatabaseGroupChatUser(DatabaseGroupChatUser instance);
    partial void DeleteDatabaseGroupChatUser(DatabaseGroupChatUser instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::FZChatServer.Orm.Properties.Settings.Default.FZChatServerDatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DatabaseUser> DatabaseUser
		{
			get
			{
				return this.GetTable<DatabaseUser>();
			}
		}
		
		public System.Data.Linq.Table<DatabaseMessage> DatabaseMessage
		{
			get
			{
				return this.GetTable<DatabaseMessage>();
			}
		}
		
		public System.Data.Linq.Table<UserFriend> UserFriend
		{
			get
			{
				return this.GetTable<UserFriend>();
			}
		}
		
		public System.Data.Linq.Table<DatabaseUserMessage> DatabaseUserMessage
		{
			get
			{
				return this.GetTable<DatabaseUserMessage>();
			}
		}
		
		public System.Data.Linq.Table<DatabaseGroupChat> DatabaseGroupChat
		{
			get
			{
				return this.GetTable<DatabaseGroupChat>();
			}
		}
		
		public System.Data.Linq.Table<DatabaseUserChat> DatabaseUserChat
		{
			get
			{
				return this.GetTable<DatabaseUserChat>();
			}
		}
		
		public System.Data.Linq.Table<DatabaseGroupChatUser> DatabaseGroupChatUser
		{
			get
			{
				return this.GetTable<DatabaseGroupChatUser>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.user_server")]
	public partial class DatabaseUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _UserName;
		
		private string _NickName;
		
		private string _Password;
		
		private string _Gender;
		
		private int _Age;
		
		private string _Email;
		
		private System.Data.Linq.Binary _Head;
		
		private EntitySet<UserFriend> _UserFriend;
		
		private EntitySet<DatabaseUserMessage> _DatabaseUserMessage;
		
		private EntitySet<DatabaseUserChat> _DatabaseUserChat;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnNickNameChanging(string value);
    partial void OnNickNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnAgeChanging(int value);
    partial void OnAgeChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnHeadChanging(System.Data.Linq.Binary value);
    partial void OnHeadChanged();
    #endregion
		
		public DatabaseUser()
		{
			this._UserFriend = new EntitySet<UserFriend>(new Action<UserFriend>(this.attach_UserFriend), new Action<UserFriend>(this.detach_UserFriend));
			this._DatabaseUserMessage = new EntitySet<DatabaseUserMessage>(new Action<DatabaseUserMessage>(this.attach_DatabaseUserMessage), new Action<DatabaseUserMessage>(this.detach_DatabaseUserMessage));
			this._DatabaseUserChat = new EntitySet<DatabaseUserChat>(new Action<DatabaseUserChat>(this.attach_DatabaseUserChat), new Action<DatabaseUserChat>(this.detach_DatabaseUserChat));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="user_name", Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="nick_name", Storage="_NickName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string NickName
		{
			get
			{
				return this._NickName;
			}
			set
			{
				if ((this._NickName != value))
				{
					this.OnNickNameChanging(value);
					this.SendPropertyChanging();
					this._NickName = value;
					this.SendPropertyChanged("NickName");
					this.OnNickNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="password", Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="gender", Storage="_Gender", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="age", Storage="_Age", DbType="Int NOT NULL")]
		public int Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="email", Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="head", Storage="_Head", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Head
		{
			get
			{
				return this._Head;
			}
			set
			{
				if ((this._Head != value))
				{
					this.OnHeadChanging(value);
					this.SendPropertyChanging();
					this._Head = value;
					this.SendPropertyChanged("Head");
					this.OnHeadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DatabaseUser_UserFriend", Storage="_UserFriend", ThisKey="id", OtherKey="User")]
		public EntitySet<UserFriend> UserFriend
		{
			get
			{
				return this._UserFriend;
			}
			set
			{
				this._UserFriend.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DatabaseUser_DatabaseUserMessage", Storage="_DatabaseUserMessage", ThisKey="id", OtherKey="User")]
		public EntitySet<DatabaseUserMessage> DatabaseUserMessage
		{
			get
			{
				return this._DatabaseUserMessage;
			}
			set
			{
				this._DatabaseUserMessage.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DatabaseUser_DatabaseUserChat", Storage="_DatabaseUserChat", ThisKey="id", OtherKey="user_connected")]
		public EntitySet<DatabaseUserChat> DatabaseUserChat
		{
			get
			{
				return this._DatabaseUserChat;
			}
			set
			{
				this._DatabaseUserChat.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserFriend(UserFriend entity)
		{
			this.SendPropertyChanging();
			entity.DatabaseUser = this;
		}
		
		private void detach_UserFriend(UserFriend entity)
		{
			this.SendPropertyChanging();
			entity.DatabaseUser = null;
		}
		
		private void attach_DatabaseUserMessage(DatabaseUserMessage entity)
		{
			this.SendPropertyChanging();
			entity.DatabaseUser = this;
		}
		
		private void detach_DatabaseUserMessage(DatabaseUserMessage entity)
		{
			this.SendPropertyChanging();
			entity.DatabaseUser = null;
		}
		
		private void attach_DatabaseUserChat(DatabaseUserChat entity)
		{
			this.SendPropertyChanging();
			entity.DatabaseUser = this;
		}
		
		private void detach_DatabaseUserChat(DatabaseUserChat entity)
		{
			this.SendPropertyChanging();
			entity.DatabaseUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.message")]
	public partial class DatabaseMessage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.DateTime _Time;
		
		private string _Sender;
		
		private string _Receiver;
		
		private string _Type;
		
		private string _Content;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    partial void OnSenderChanging(string value);
    partial void OnSenderChanged();
    partial void OnReceiverChanging(string value);
    partial void OnReceiverChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    #endregion
		
		public DatabaseMessage()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="time", Storage="_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="sender", Storage="_Sender", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Sender
		{
			get
			{
				return this._Sender;
			}
			set
			{
				if ((this._Sender != value))
				{
					this.OnSenderChanging(value);
					this.SendPropertyChanging();
					this._Sender = value;
					this.SendPropertyChanged("Sender");
					this.OnSenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="receiver", Storage="_Receiver", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Receiver
		{
			get
			{
				return this._Receiver;
			}
			set
			{
				if ((this._Receiver != value))
				{
					this.OnReceiverChanging(value);
					this.SendPropertyChanging();
					this._Receiver = value;
					this.SendPropertyChanged("Receiver");
					this.OnReceiverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="type", Storage="_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="content", Storage="_Content", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.user_friend")]
	public partial class UserFriend : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _UserName;
		
		private System.Nullable<int> _User;
		
		private EntityRef<DatabaseUser> _DatabaseUser;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnUserChanging(System.Nullable<int> value);
    partial void OnUserChanged();
    #endregion
		
		public UserFriend()
		{
			this._DatabaseUser = default(EntityRef<DatabaseUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="user_name", Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="user_connected", Storage="_User", DbType="Int")]
		public System.Nullable<int> User
		{
			get
			{
				return this._User;
			}
			set
			{
				if ((this._User != value))
				{
					this.OnUserChanging(value);
					this.SendPropertyChanging();
					this._User = value;
					this.SendPropertyChanged("User");
					this.OnUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DatabaseUser_UserFriend", Storage="_DatabaseUser", ThisKey="User", OtherKey="id", IsForeignKey=true)]
		public DatabaseUser DatabaseUser
		{
			get
			{
				return this._DatabaseUser.Entity;
			}
			set
			{
				DatabaseUser previousValue = this._DatabaseUser.Entity;
				if (((previousValue != value) 
							|| (this._DatabaseUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DatabaseUser.Entity = null;
						previousValue.UserFriend.Remove(this);
					}
					this._DatabaseUser.Entity = value;
					if ((value != null))
					{
						value.UserFriend.Add(this);
						this._User = value.id;
					}
					else
					{
						this._User = default(Nullable<int>);
					}
					this.SendPropertyChanged("DatabaseUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.user_message")]
	public partial class DatabaseUserMessage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.DateTime _Time;
		
		private string _Sender;
		
		private string _Receiver;
		
		private string _Type;
		
		private string _Content;
		
		private System.Nullable<int> _User;
		
		private EntityRef<DatabaseUser> _DatabaseUser;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    partial void OnSenderChanging(string value);
    partial void OnSenderChanged();
    partial void OnReceiverChanging(string value);
    partial void OnReceiverChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnUserChanging(System.Nullable<int> value);
    partial void OnUserChanged();
    #endregion
		
		public DatabaseUserMessage()
		{
			this._DatabaseUser = default(EntityRef<DatabaseUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="time", Storage="_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="sender", Storage="_Sender", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Sender
		{
			get
			{
				return this._Sender;
			}
			set
			{
				if ((this._Sender != value))
				{
					this.OnSenderChanging(value);
					this.SendPropertyChanging();
					this._Sender = value;
					this.SendPropertyChanged("Sender");
					this.OnSenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="receiver", Storage="_Receiver", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Receiver
		{
			get
			{
				return this._Receiver;
			}
			set
			{
				if ((this._Receiver != value))
				{
					this.OnReceiverChanging(value);
					this.SendPropertyChanging();
					this._Receiver = value;
					this.SendPropertyChanged("Receiver");
					this.OnReceiverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="type", Storage="_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="content", Storage="_Content", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="user_connected", Storage="_User", DbType="Int")]
		public System.Nullable<int> User
		{
			get
			{
				return this._User;
			}
			set
			{
				if ((this._User != value))
				{
					this.OnUserChanging(value);
					this.SendPropertyChanging();
					this._User = value;
					this.SendPropertyChanged("User");
					this.OnUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DatabaseUser_DatabaseUserMessage", Storage="_DatabaseUser", ThisKey="User", OtherKey="id", IsForeignKey=true)]
		public DatabaseUser DatabaseUser
		{
			get
			{
				return this._DatabaseUser.Entity;
			}
			set
			{
				DatabaseUser previousValue = this._DatabaseUser.Entity;
				if (((previousValue != value) 
							|| (this._DatabaseUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DatabaseUser.Entity = null;
						previousValue.DatabaseUserMessage.Remove(this);
					}
					this._DatabaseUser.Entity = value;
					if ((value != null))
					{
						value.DatabaseUserMessage.Add(this);
						this._User = value.id;
					}
					else
					{
						this._User = default(Nullable<int>);
					}
					this.SendPropertyChanged("DatabaseUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.group_chat")]
	public partial class DatabaseGroupChat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _ChatName;
		
		private int _ChatNumber;
		
		private EntitySet<DatabaseGroupChatUser> _DatabaseGroupChatUser;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnChatNameChanging(string value);
    partial void OnChatNameChanged();
    partial void OnChatNumberChanging(int value);
    partial void OnChatNumberChanged();
    #endregion
		
		public DatabaseGroupChat()
		{
			this._DatabaseGroupChatUser = new EntitySet<DatabaseGroupChatUser>(new Action<DatabaseGroupChatUser>(this.attach_DatabaseGroupChatUser), new Action<DatabaseGroupChatUser>(this.detach_DatabaseGroupChatUser));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="chat_name", Storage="_ChatName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ChatName
		{
			get
			{
				return this._ChatName;
			}
			set
			{
				if ((this._ChatName != value))
				{
					this.OnChatNameChanging(value);
					this.SendPropertyChanging();
					this._ChatName = value;
					this.SendPropertyChanged("ChatName");
					this.OnChatNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="chat_number", Storage="_ChatNumber", DbType="Int NOT NULL")]
		public int ChatNumber
		{
			get
			{
				return this._ChatNumber;
			}
			set
			{
				if ((this._ChatNumber != value))
				{
					this.OnChatNumberChanging(value);
					this.SendPropertyChanging();
					this._ChatNumber = value;
					this.SendPropertyChanged("ChatNumber");
					this.OnChatNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DatabaseGroupChat_group_chat_user", Storage="_DatabaseGroupChatUser", ThisKey="id", OtherKey="group_chat_connected")]
		public EntitySet<DatabaseGroupChatUser> DatabaseGroupChatUser
		{
			get
			{
				return this._DatabaseGroupChatUser;
			}
			set
			{
				this._DatabaseGroupChatUser.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DatabaseGroupChatUser(DatabaseGroupChatUser entity)
		{
			this.SendPropertyChanging();
			entity.DatabaseGroupChat = this;
		}
		
		private void detach_DatabaseGroupChatUser(DatabaseGroupChatUser entity)
		{
			this.SendPropertyChanging();
			entity.DatabaseGroupChat = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.user_group_chat")]
	public partial class DatabaseUserChat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _Number;
		
		private int _user_connected;
		
		private EntityRef<DatabaseUser> _DatabaseUser;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNumberChanging(int value);
    partial void OnNumberChanged();
    partial void Onuser_connectedChanging(int value);
    partial void Onuser_connectedChanged();
    #endregion
		
		public DatabaseUserChat()
		{
			this._DatabaseUser = default(EntityRef<DatabaseUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="group_chat_number", Storage="_Number", DbType="Int NOT NULL")]
		public int Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_connected", DbType="Int NOT NULL")]
		public int user_connected
		{
			get
			{
				return this._user_connected;
			}
			set
			{
				if ((this._user_connected != value))
				{
					if (this._DatabaseUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_connectedChanging(value);
					this.SendPropertyChanging();
					this._user_connected = value;
					this.SendPropertyChanged("user_connected");
					this.Onuser_connectedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DatabaseUser_DatabaseUserChat", Storage="_DatabaseUser", ThisKey="user_connected", OtherKey="id", IsForeignKey=true)]
		public DatabaseUser DatabaseUser
		{
			get
			{
				return this._DatabaseUser.Entity;
			}
			set
			{
				DatabaseUser previousValue = this._DatabaseUser.Entity;
				if (((previousValue != value) 
							|| (this._DatabaseUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DatabaseUser.Entity = null;
						previousValue.DatabaseUserChat.Remove(this);
					}
					this._DatabaseUser.Entity = value;
					if ((value != null))
					{
						value.DatabaseUserChat.Add(this);
						this._user_connected = value.id;
					}
					else
					{
						this._user_connected = default(int);
					}
					this.SendPropertyChanged("DatabaseUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.group_chat_user")]
	public partial class DatabaseGroupChatUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _UserName;
		
		private int _group_chat_connected;
		
		private EntityRef<DatabaseGroupChat> _DatabaseGroupChat;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void Ongroup_chat_connectedChanging(int value);
    partial void Ongroup_chat_connectedChanged();
    #endregion
		
		public DatabaseGroupChatUser()
		{
			this._DatabaseGroupChat = default(EntityRef<DatabaseGroupChat>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="user_name", Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_group_chat_connected", DbType="Int NOT NULL")]
		public int group_chat_connected
		{
			get
			{
				return this._group_chat_connected;
			}
			set
			{
				if ((this._group_chat_connected != value))
				{
					if (this._DatabaseGroupChat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ongroup_chat_connectedChanging(value);
					this.SendPropertyChanging();
					this._group_chat_connected = value;
					this.SendPropertyChanged("group_chat_connected");
					this.Ongroup_chat_connectedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DatabaseGroupChat_group_chat_user", Storage="_DatabaseGroupChat", ThisKey="group_chat_connected", OtherKey="id", IsForeignKey=true)]
		public DatabaseGroupChat DatabaseGroupChat
		{
			get
			{
				return this._DatabaseGroupChat.Entity;
			}
			set
			{
				DatabaseGroupChat previousValue = this._DatabaseGroupChat.Entity;
				if (((previousValue != value) 
							|| (this._DatabaseGroupChat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DatabaseGroupChat.Entity = null;
						previousValue.DatabaseGroupChatUser.Remove(this);
					}
					this._DatabaseGroupChat.Entity = value;
					if ((value != null))
					{
						value.DatabaseGroupChatUser.Add(this);
						this._group_chat_connected = value.id;
					}
					else
					{
						this._group_chat_connected = default(int);
					}
					this.SendPropertyChanged("DatabaseGroupChat");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
